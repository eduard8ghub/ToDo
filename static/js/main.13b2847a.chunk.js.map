{"version":3,"sources":["assets/img/remove.svg","assets/img/add.svg","assets/img/edit.svg","assets/img/check.svg","assets/img/list.svg","assets/img/close.svg","components/AddList/Badge/Badge.jsx","components/List/List.jsx","api/api.js","store/Lists/actions.js","components/List/ListContainer.jsx","store/Lists/reducer.js","store/index.js","store/Tasks/actions.js","components/AddList/PopupLists/PopupLists.jsx","components/AddList/PopupLists/PopupListsContainer.jsx","components/AddList/AddList.jsx","components/AddList/AddListContainer.jsx","components/Tasks/AddTask/AddTask.jsx","components/Tasks/TasksList/TaskListTitle/TaskListTitle.jsx","components/Tasks/TasksList/ChangeTaskForm/ChangeTaskForm.jsx","components/Tasks/TasksList/ContentTask/ContentTask.jsx","components/Tasks/TasksList/TasksList.jsx","components/Tasks/Tasks.jsx","components/Tasks/TasksContainer.jsx","App.js","index.js"],"names":["module","exports","Badge","colors","onClick","className","classNames","List","React","memo","props","lists","isRemovable","iconRemove","onSetVisiblePopup","deleteList","setActiveItem","activeItem","onAddTask","isTasksList","isAllList","history","useHistory","useEffect","historyId","location","pathname","split","Number","map","listItem","index","key","e","target","tagName","push","id","icon","src","alt","color","name","tasks","length","instance","axios","create","baseURL","todoAPI","get","then","response","data","post","colorId","delete","text","patch","listId","completed","checkStatus","taskText","setVisiblePopup","type","ListContainer","state","localLists","iconLists","this","getListsTasks","getColors","Component","compose","connect","activeItemLists","dispatch","dataLists","payload","deleteItemList","defaultState","visiblePopup","combineReducers","action","filter","itemList","item","task","itemTask","PopupLists","addList","useState","selectedColor","setColor","initialValues","listName","validate","values","errors","onSubmit","setSubmitting","handleChange","handleSubmit","isSubmitting","placeholder","onChange","value","autoComplete","render","msg","iconClose","disabled","PopupListsContainer","list","addNewList","AddList","iconAdd","AddListContainer","AddTask","onHiddenInput","taskId","addNewTask","TaskListTitle","changeTaskTitle","editModeTitle","setEditModeTitle","currentTitle","setCurrentTitle","taskTitle","setTaskTitle","autoFocus","onBlur","style","hex","iconEdit","ChangeTaskForm","onChangeTaskText","setCloseInput","classesNames","iconCheck","ContentTask","changeTaskCheck","deleteTaskItem","taskIdToChange","TasksList","listTasks","allListTasks","setAllListTasks","activeTaskChange","setActiveTaskChange","visibleInput","setVisibleInput","idInputFolder","setIdInputFolder","Tasks","activeItemList","activeLink","isNaN","getTasks","onDeleteTask","path","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","window","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.13b2847a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/remove.95f30ee9.svg\";","module.exports = __webpack_public_path__ + \"static/media/add.04bce1ba.svg\";","module.exports = __webpack_public_path__ + \"static/media/edit.e6d3868a.svg\";","module.exports = __webpack_public_path__ + \"static/media/check.2719c90b.svg\";","module.exports = __webpack_public_path__ + \"static/media/list.a688c249.svg\";","module.exports = __webpack_public_path__ + \"static/media/close.10c581b6.svg\";","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport \"./Badge.scss\";\n\nconst Badge = ({colors, onClick, className}) => {\n    return <i className={`badge badge--${colors} ` + classNames(className)} onClick={onClick}/>\n};\n\nexport default Badge;","import React, {useEffect} from \"react\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport \"./List.scss\";\r\nimport classNames from \"classnames\";\r\nimport Badge from \"../AddList/Badge/Badge\";\r\n\r\n\r\nconst List = React.memo((props) => {\r\n    const {lists, isRemovable, iconRemove, onSetVisiblePopup, deleteList, setActiveItem, activeItem, onAddTask, isTasksList, isAllList} = props;\r\n    let history = useHistory();\r\n\r\n    useEffect(() => {\r\n        const historyId = history.location.pathname.split('/ToDo/lists/')[1];\r\n        setActiveItem && setActiveItem(Number(historyId) - 1);\r\n    }, [history.location.pathname]);\r\n\r\n    return (\r\n        <ul className={classNames('todo__list', {'list__removable': isRemovable})}\r\n            onClick={isTasksList ? onAddTask : onSetVisiblePopup}\r\n        >\r\n\r\n            {\r\n                lists.map((listItem, index) => (\r\n                    <li key={index}\r\n                        className={\r\n                            classNames({\r\n                                'removable': isRemovable,\r\n                                'active': index === activeItem,\r\n                            })\r\n                        }\r\n                        onClick={\r\n                            isRemovable ? ((e) => {\r\n                                if (e.target.tagName !== \"IMG\") {\r\n                                    history.push(`/ToDo/lists/${listItem.id}`);\r\n                                }\r\n                            }) :\r\n                            isAllList &&\r\n                                (() => {\r\n                                    history.push(`/ToDo/lists`);\r\n                                })\r\n                        }>\r\n\r\n                        <i>\r\n                            {listItem.icon ? <img src={listItem.icon} alt=\"icon\"/> :\r\n                                <Badge colors={listItem.color.name}/>}\r\n                        </i>\r\n                        <span className=\"name--item\">{listItem.name}</span>\r\n                        {isRemovable && <span className=\"count__list\">({listItem.tasks.length})</span>}\r\n                        {\r\n                            isRemovable &&\r\n                            <span className=\"remove_item\" onClick={() => {\r\n                                history.push(`/lists/1`);\r\n                                deleteList(listItem.id);\r\n                            }}>\r\n                                    <img src={iconRemove} alt=\"X\"/>\r\n                                </span>\r\n                        }\r\n                    </li>\r\n                ))\r\n            }\r\n        </ul>\r\n    )\r\n});\r\n\r\n\r\nexport default List;","import axios from \"axios\";\n\n\nconst instance = axios.create({\n    baseURL: \"http://localhost:3001/\",\n});\n\nexport const todoAPI = {\n    getListsTasks() {\n        return instance.get('/lists?_expand=color&_embed=tasks')\n            .then(response => response.data)\n    },\n    addList(name, color) {\n        return instance.post('/lists?_expand=color&_embed=tasks', {\n            name: name,\n            colorId: color.id,\n            tasks: [],\n            color: {...color}\n        })\n            .then(response => response.data)\n    },\n    deleteList(id) {\n        return instance.delete(`/lists/${id}`)\n    },\n    getColors() {\n        return instance.get('/colors')\n            .then(response => response.data)\n    },\n    getTasks() {\n        return instance.get('/lists?_expand=color&_embed=tasks')\n            .then(response => response.data)\n    },\n    changeTaskTitle(text, id) {\n        return instance.patch(`/lists/${id}/?_expand=color&_embed=tasks`, {\n            name: text\n        }).then(response => response.data)\n    },\n    addTask(text, id) {\n        return instance.post(`/tasks`, {\n            listId: id,\n            text: text,\n            completed: false\n        }).then(response => response.data)\n    },\n    changeTaskCheck(checkStatus, id) {\n        return instance.patch(`/tasks/${id}`, {\n            completed: checkStatus\n        }).then(response => response.data)\n    },\n    changeTaskText(taskText, id) {\n        return instance.patch(`/tasks/${id}`, {\n            text: taskText\n        }).then(response => response.data)\n    },\n    deleteTask(id) {\n        return instance.delete(`/tasks/${id}`)\n    },\n};","import {todoAPI} from \"../../api/api\";\n\nexport const SET_LISTS = \"SET_LISTS\";\nexport const SET_COLORS = \"SET_COLORS\";\nexport const SET_VISIBLE_POPUP = \"SET_VISIBLE_POPUP\";\nexport const ADD_NEW_LIST = \"ADD_NEW_LIST\";\nexport const DELETE_LIST = \"DELETE_LIST\";\nexport const SET_ACTIVE_ITEM = \"SET_ACTIVE_ITEM\";\n\n\nexport const setLists = (lists) => ({\n    type: SET_LISTS,\n    payload: lists\n});\n\nexport const setColors = (colors) => ({\n    type: SET_COLORS,\n    payload: colors\n});\n\nexport const setVisiblePopup = () => ({\n    type: SET_VISIBLE_POPUP,\n});\n\nexport const addNewList = (list) => ({\n    type: ADD_NEW_LIST,\n    payload: list\n});\n\nexport const deleteItemList = (id) => ({\n    type: DELETE_LIST,\n    payload: id\n});\n\nexport const setActiveItem = (id) => ({\n    type: SET_ACTIVE_ITEM,\n    payload: id\n});\n\n\n\n//--------------------------------------------------------------//\n\n\n\nexport const getListsTasks = () => (dispatch) => {\n    todoAPI.getListsTasks()\n        .then(dataLists => {\n            dispatch(setLists(dataLists))\n        })\n};\n\nexport const getColors = () => (dispatch) => {\n    todoAPI.getColors()\n        .then(response => {\n            dispatch(setColors(response))\n        })\n};\n\nexport const addList = (name, color) => (dispatch) => {\n    todoAPI.addList(name, color)\n        .then(dataLists => {\n            dispatch(addNewList(dataLists))\n        })\n};\n\nexport const deleteList = (id) => (dispatch) => {\n    todoAPI.deleteList(id)\n        .then(() => {\n            dispatch(deleteItemList(id))\n        })\n};","import React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport List from \"./List\";\n\nimport iconLists from \"./../../assets/img/list.svg\"\nimport iconRemove from \"./../../assets/img/remove.svg\"\nimport {deleteList, getColors, getListsTasks, setActiveItem} from \"../../store/Lists/actions\";\nimport {compose} from \"redux\";\n\nclass ListContainer extends Component {\n    componentDidMount() {\n        this.props.getListsTasks();\n        this.props.getColors();\n    }\n\n    state = {\n        localLists: [\n            {name: \"Все задачи\", icon: iconLists}\n        ],\n    };\n\n\n    render() {\n        return (\n            <>\n                <List lists={this.state.localLists} isAllList={true}/>\n                {\n                    this.props.lists.length > 0 &&\n                    <List\n                        lists={this.props.lists}\n                        activeItem={this.props.activeItem}\n                        deleteList={this.props.deleteList}\n                        setActiveItem={this.props.setActiveItem}\n                        isRemovable={true}\n                        iconRemove={iconRemove}\n                    />\n                }\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = ({lists}) => {\n    return {\n        lists: lists.lists,\n        activeItem: lists.activeItemLists,\n    }\n};\n\nexport default compose(\n    connect(mapStateToProps, {getListsTasks, getColors, deleteList, setActiveItem}))(ListContainer);","import {ADD_NEW_LIST, DELETE_LIST, SET_ACTIVE_ITEM, SET_COLORS, SET_LISTS, SET_VISIBLE_POPUP} from \"./actions\";\r\nimport {ADD_NEW_TASK, CHANGE_TASK_CHECK, CHANGE_TASK_TEXT, CHANGE_TASK_TITLE, DELETE_TASK} from \"../Tasks/actions\";\r\n\r\nconst defaultState = {\r\n    lists: [],\r\n    colors: [],\r\n    visiblePopup: false,\r\n    activeItemLists: 0\r\n};\r\n\r\nexport const listsReducer = (state = defaultState, action) => {\r\n    switch (action.type) {\r\n        case SET_COLORS:\r\n            return {\r\n                ...state,\r\n                colors: action.payload\r\n            };\r\n        case SET_LISTS:\r\n            return {\r\n                ...state,\r\n                lists: [...action.payload]\r\n            };\r\n        case ADD_NEW_LIST:\r\n            return {\r\n                ...state,\r\n                lists: [...state.lists, action.payload]\r\n            };\r\n        case DELETE_LIST:\r\n            return {\r\n                ...state,\r\n                lists: state.lists.filter(itemList => itemList.id !== action.payload)\r\n            };\r\n        case SET_VISIBLE_POPUP:\r\n            return {\r\n                ...state,\r\n                visiblePopup: !state.visiblePopup\r\n            };\r\n        case SET_ACTIVE_ITEM:\r\n            return {\r\n                ...state,\r\n                activeItemLists: action.payload\r\n            };\r\n        case CHANGE_TASK_TITLE:\r\n            return {\r\n                ...state,\r\n                lists: [...state.lists, ...state.lists.filter(item => {\r\n                    if (item.id === action.payload.id && item.name !== action.payload.name) {\r\n                        item.name = action.payload.name;\r\n                    }\r\n                    return false;\r\n                })]\r\n            };\r\n        case ADD_NEW_TASK:\r\n            return {\r\n                ...state,\r\n                lists: [...state.lists.filter(task => {\r\n                    if (task.id === action.payload.listId) {\r\n                        return task.tasks.push(action.payload);\r\n                    }\r\n                    return task;\r\n                })]\r\n            };\r\n        case CHANGE_TASK_CHECK:\r\n            return {\r\n                ...state,\r\n                lists: [...state.lists.filter(task => {\r\n                    if (task.id === action.payload.listId) {\r\n                        task.tasks.filter(itemTask => {\r\n                            if (itemTask.id === action.payload.id) {\r\n                                return itemTask.completed = action.payload.completed;\r\n                            }\r\n                        });\r\n                        return task;\r\n                    }\r\n                    return task;\r\n                })]\r\n            };\r\n        case CHANGE_TASK_TEXT:\r\n            return {\r\n                ...state,\r\n                lists: [...state.lists.filter(task => {\r\n                    if (task.id === action.payload.listId) {\r\n                        task.tasks.filter(itemTask => {\r\n                            if (itemTask.id === action.payload.id) {\r\n                                return itemTask.text = action.payload.text;\r\n                            }\r\n                        });\r\n                        return task;\r\n                    }\r\n                    return task;\r\n                })]\r\n            };\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                lists: [...state.lists.map(itemList => {\r\n                    if (itemList.id === action.listId) {\r\n                        itemList.tasks = itemList.tasks.filter(task => task.id !== action.id);\r\n                    }\r\n                    return itemList;\r\n                })]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n","import { combineReducers } from \"redux\";\nimport {listsReducer} from \"./Lists/reducer\";\n\n\nexport default combineReducers ({\n    lists: listsReducer,\n})","import {todoAPI} from \"../../api/api\";\n\nexport const SET_TASKS = \"SET_TASKS\";\nexport const CHANGE_TASK_TITLE = \"CHANGE_TASK_TITLE\";\nexport const ADD_NEW_TASK = \"ADD_NEW_TASK\";\nexport const CHANGE_TASK_CHECK = \"CHANGE_TASK_CHECK\";\nexport const CHANGE_TASK_TEXT = \"CHANGE_TASK_TEXT\";\nexport const DELETE_TASK = \"DELETE_TASK\";\n\n\nexport const setTasks = (tasks) => ({\n    type: SET_TASKS,\n    payload: tasks\n});\n\nexport const changeTitle = (payload) => {\n    return {\n    type: CHANGE_TASK_TITLE,\n        payload\n\n}};\n\nexport const onAddNewTask = (payload) => {\n    return {\n    type: ADD_NEW_TASK,\n        payload\n\n}};\n\nexport const onChangeCheckTasks = (payload) => {\n    return {\n    type: CHANGE_TASK_CHECK,\n        payload\n\n}};\n\nexport const onChangeTasksText = (payload) => {\n    return {\n    type: CHANGE_TASK_TEXT,\n        payload\n\n}};\n\nexport const onDeleteTask = (id, listId) => {\n    return {\n    type: DELETE_TASK,\n        id,\n        listId\n\n}};\n\n\nexport const getTasks = () => (dispatch) => {\n    todoAPI.getTasks()\n        .then(data => {\n            dispatch(setTasks(data));\n        })\n};\n\n\nexport const changeTaskTitle = (text, id) => (dispatch) => {\n    todoAPI.changeTaskTitle(text, id)\n        .then(data => {\n            dispatch(changeTitle(data));\n        })\n};\nexport const addNewTask = (text, id) => (dispatch) => {\n    todoAPI.addTask(text, id)\n        .then(data => {\n            dispatch(onAddNewTask(data));\n        })\n};\n\nexport const changeTaskCheck = (checkStatus, id) => (dispatch) => {\n    todoAPI.changeTaskCheck(checkStatus, id)\n        .then(data => {\n            dispatch(onChangeCheckTasks(data));\n        })\n};\n\nexport const onChangeTaskText = (taskText, id) => (dispatch) => {\n    todoAPI.changeTaskText(taskText, id)\n        .then(data => {\n            dispatch(onChangeTasksText(data));\n        })\n};\n\nexport const deleteTaskItem = (id, listId) => (dispatch) => {\n    todoAPI.deleteTask(id)\n        .then((data) => {\n            dispatch(onDeleteTask(id, listId))\n        })\n};","import React, {useState} from 'react';\nimport Badge from \"../Badge/Badge\";\nimport classNames from \"classnames\";\n\nimport \"./../AddList.scss\";\nimport iconClose from \"./../../../assets/img/close.svg\"\nimport {ErrorMessage, Formik} from \"formik\";\n\nconst PopupLists = ({colors, setVisiblePopup, visiblePopup, addList}) => {\n    const [selectedColor, setColor] = useState(colors[0]);\n    return (\n        <>\n            <div className={classNames('add-list__popup', {\"visible__popup\": visiblePopup})}>\n\n                <Formik\n                    initialValues={{listName: '', color: selectedColor}}\n                    validate={values => {\n                        const errors = {};\n                        if (!values.listName) {\n                            errors.listName = 'Название папки обязательно';\n                        }\n                        return errors;\n                    }}\n                    onSubmit={(values, {setSubmitting}) => {\n                            addList(values.listName, values.color);\n                            values.listName = '';\n                            setSubmitting(false);\n                            setVisiblePopup()\n                    }}\n                >\n                    {({\n                          values,\n                          errors,\n                          handleChange,\n                          handleSubmit,\n                          isSubmitting,\n                      }) => (\n                        <form onSubmit={handleSubmit}>\n                            <input\n                                type=\"text\"\n                                className={classNames('field',{'inputError': errors.listName})}\n                                placeholder=\"Название папки\"\n                                name=\"listName\"\n                                onChange={handleChange}\n                                value={values.listName}\n                                autoComplete=\"off\"\n                            />\n                            <ErrorMessage name=\"listName\" render={msg => <div className=\"err\">{msg}</div> }/>\n                            <div className=\"add-list__popup-colors\">\n                                {\n                                    colors.map((color, index) => (\n                                        <Badge\n                                            onClick={() => {\n                                                setColor(color);\n                                                values.color = color\n                                            }}\n                                            colors={color.name}\n                                            key={index}\n                                            className={selectedColor.id === color.id && 'active'}\n                                        />\n                                    ))\n                                }\n                            </div>\n                            <div className=\"add-list__popup-close\" onClick={() => {\n                                setVisiblePopup()\n                            }}>\n                                <img src={iconClose} alt=\"X\"/>\n\n                            </div>\n                            <button type=\"submit\" disabled={isSubmitting} className=\"button\">\n                                {isSubmitting ? 'Добавляется...' : 'Добавить'}</button>\n                        </form>\n                    )}\n                </Formik>\n\n            </div>\n\n        </>\n    )\n};\n\nexport default PopupLists;","import React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport PopupLists from \"./PopupLists\";\nimport {addList, setVisiblePopup} from \"../../../store/Lists/actions\";\n\nclass PopupListsContainer extends Component {\n    render() {\n        return (\n            <>\n                {/*{console.log(this.props.colors)}*/}\n                {   this.props.colors &&\n                    this.props.colors.length > 0 &&\n                <PopupLists\n                        colors={this.props.colors}\n                        // statusPopup={this.props.statusPopup}\n                        visiblePopup={this.props.visiblePopup}\n                        setVisiblePopup={this.props.setVisiblePopup}\n                        addList={this.props.addList}\n                    />\n                }\n            </>\n        );\n    }\n}\n\nconst mapDispatchToProps = (state) => {\n    return {\n        colors: state.lists.colors,\n        visiblePopup: state.lists.visiblePopup\n    }\n};\n\nexport default connect(mapDispatchToProps,{setVisiblePopup, addList})(PopupListsContainer);","import React from 'react';\nimport {List} from \"../index\";\nimport PopupListsContainer from \"./PopupLists/PopupListsContainer\";\n\nimport iconAdd from \"../../assets/img/add.svg\";\nimport \"./AddList.scss\";\n\nconst AddList = ({setVisiblePopup}) => {\n\n    return (\n        <div className=\"add-list\">\n            <List\n                lists={[{name: \"Добавить папку\", icon: iconAdd}]}\n                onSetVisiblePopup={() => {setVisiblePopup()}}\n            />\n            <PopupListsContainer/>\n        </div>\n    );\n};\n\nexport default AddList;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport AddList from \"./AddList\";\nimport {setVisiblePopup} from \"../../store/Lists/actions\";\n\nfunction mapStateToProps(state) {\n    return {\n        visiblePopup: state.lists.visiblePopup\n    };\n}\n\nclass AddListContainer extends Component {\n    render() {\n        return (\n            <>\n                <AddList visiblePopup={this.props.visiblePopup} setVisiblePopup={this.props.setVisiblePopup}/>\n            </>\n        );\n    }\n}\n\nexport default connect(\n    mapStateToProps,{setVisiblePopup}\n)(AddListContainer);","import React from 'react';\r\nimport \"./AddTask.scss\"\r\nimport classNames from \"classnames\";\r\nimport {ErrorMessage, Formik} from \"formik\";\r\n\r\n\r\nconst AddTask = ({onHiddenInput, taskId, addNewTask}) => {\r\n    return (\r\n        <div className=\"add-task__input\">\r\n            <Formik\r\n                initialValues={{taskText: ''}}\r\n                validate={values => {\r\n                    const errors = {};\r\n                    if (!values.taskText) {\r\n                        errors.taskText = 'Название папки обязательно';\r\n                    }\r\n                    return errors;\r\n                }}\r\n                onSubmit={(values, {setSubmitting}) => {\r\n                    addNewTask(values.taskText, taskId);\r\n                    onHiddenInput(false);\r\n                }}\r\n            >\r\n                {({\r\n                      values,\r\n                      errors,\r\n                      handleChange,\r\n                      handleSubmit,\r\n                      isSubmitting,\r\n                  }) => (\r\n                    <form onSubmit={handleSubmit}>\r\n                        <input\r\n                            type=\"text\"\r\n                            className={classNames('field', {'inputError': errors.taskText})}\r\n                            placeholder=\"Текст задачи\"\r\n                            name=\"taskText\"\r\n                            onChange={handleChange}\r\n                            value={values.taskText}\r\n                            autoComplete=\"off\"\r\n                        />\r\n                        <ErrorMessage name=\"taskText\" render={msg => <div className=\"err\">{msg}</div>}/>\r\n                        <div className=\"wrap__button\">\r\n                            <button type=\"submit\" className=\"button button-add__task\" disabled={isSubmitting}>Добавить\r\n                                задачу\r\n                            </button>\r\n                            <button className=\"button button-cancel\" onClick={() => {\r\n                                onHiddenInput(false)\r\n                            }}>Отмена\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddTask;","import React, {useEffect, useState} from 'react';\r\nimport iconEdit from \"../../../../assets/img/edit.svg\";\r\n\r\nconst TaskListTitle = ({changeTaskTitle, itemTask}) => {\r\n    const [editModeTitle, setEditModeTitle] = useState(false);\r\n    const [currentTitle, setCurrentTitle] = useState(null);\r\n    const [taskTitle, setTaskTitle] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (editModeTitle === false && currentTitle) {\r\n            changeTaskTitle(taskTitle, currentTitle);\r\n        }\r\n    }, [taskTitle, editModeTitle, currentTitle, changeTaskTitle]);\r\n\r\n    return (\r\n        <div className=\"todo__tasks-title\">\r\n            {editModeTitle && itemTask.id === currentTitle\r\n                ?\r\n                <input\r\n                    type=\"text\"\r\n                    value={taskTitle}\r\n                    autoFocus={true}\r\n                    onBlur={() => {\r\n                        setEditModeTitle(false)\r\n                    }}\r\n                    onChange={(e) => {\r\n                        setTaskTitle(e.target.value)\r\n                    }}\r\n                />\r\n                :\r\n                <span style={{color: `${itemTask.color.hex}`}}>{itemTask.name}</span>\r\n            }\r\n            <i onClick={() => {\r\n                setCurrentTitle(itemTask.id);\r\n                setEditModeTitle(!editModeTitle);\r\n                setTaskTitle(itemTask.name);\r\n            }}>\r\n                <img src={iconEdit} alt=\"edit\"/>\r\n            </i>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TaskListTitle;","import React from 'react';\r\nimport {ErrorMessage, Formik} from \"formik\";\r\nimport classesNames from \"classnames\";\r\nimport iconCheck from \"../../../../assets/img/check.svg\";\r\n\r\nconst ChangeTaskForm = ({task, onChangeTaskText, setCloseInput}) => {\r\n    return (\r\n        <div className=\"change__task\">\r\n            <Formik\r\n                initialValues={{taskText: task.text}}\r\n                validate={values => {\r\n                    const errors = {};\r\n                    if (!values.taskText) {\r\n                        errors.taskText = 'Название папки обязательно';\r\n                    }\r\n                    return errors;\r\n                }}\r\n                onSubmit={(values, {setSubmitting}) => {\r\n                    onChangeTaskText(values.taskText, task.id);\r\n                    setCloseInput(null);\r\n                }}\r\n            >\r\n                {({\r\n                      values,\r\n                      errors,\r\n                      handleChange,\r\n                      handleSubmit,\r\n                      isSubmitting,\r\n                  }) => (\r\n                    <form onSubmit={handleSubmit}>\r\n                        <input\r\n                            type=\"text\"\r\n                            className={classesNames('field', {'inputError': errors.taskText})}\r\n                            name=\"taskText\"\r\n                            onChange={handleChange}\r\n                            value={values.taskText}\r\n                            autoComplete=\"off\"\r\n                            autoFocus={true}\r\n                        />\r\n                        <ErrorMessage name=\"taskText\"\r\n                                      render={msg => <div\r\n                                          className=\"err\">{msg}</div>}/>\r\n                        <button type=\"submit\"\r\n                                className=\"button button-add__task\"\r\n                                disabled={isSubmitting}\r\n                        >\r\n                            <img src={iconCheck} alt=\"ok\"/>\r\n                        </button>\r\n                    </form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChangeTaskForm;","import React from 'react';\r\nimport classesNames from \"classnames\";\r\nimport iconCheck from \"../../../../assets/img/check.svg\";\r\nimport iconEdit from \"../../../../assets/img/edit.svg\";\r\nimport iconRemove from \"../../../../assets/img/remove.svg\";\r\n\r\nconst ContentTask = ({task, changeTaskCheck, deleteTaskItem, taskIdToChange}) => {\r\n    return (\r\n        <div className=\"content__tasks\">\r\n            <i className={classesNames('check', {\"checked\": task.completed})}\r\n               onClick={() => {\r\n                   changeTaskCheck(!task.completed, task.id)\r\n               }}>\r\n                <img src={iconCheck} alt=\"icon\"/>\r\n            </i>\r\n            <span>{task.text}</span>\r\n            <i className=\"edit_item\" onClick={() => {\r\n                taskIdToChange(task.id)\r\n            }}>\r\n                <img src={iconEdit} alt=\"edit\"/>\r\n            </i>\r\n            <i className=\"remove_item\" onClick={() => {\r\n                deleteTaskItem(task.id, task.listId)\r\n            }}>\r\n                <img src={iconRemove} alt=\"X\"/>\r\n            </i>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ContentTask;","import React, {useState, useEffect} from \"react\";\r\nimport \"./TasksList.scss\";\r\n\r\nimport AddTask from \"../AddTask/AddTask\";\r\nimport List from \"../../List/List\";\r\nimport iconAdd from \"../../../assets/img/add.svg\";\r\nimport TaskListTitle from \"./TaskListTitle/TaskListTitle\";\r\nimport ChangeTaskForm from \"./ChangeTaskForm/ChangeTaskForm\";\r\nimport ContentTask from \"./ContentTask/ContentTask\";\r\n\r\nconst TasksList = ({listTasks, changeTaskTitle, changeTaskCheck, onChangeTaskText, deleteTaskItem, addNewTask}) => {\r\n    const [allListTasks, setAllListTasks] = useState(listTasks.length ? listTasks : [listTasks]);\r\n    const [activeTaskChange, setActiveTaskChange] = useState(null);\r\n    const [visibleInput, setVisibleInput] = useState(false);\r\n    const [idInputFolder, setIdInputFolder] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setAllListTasks(listTasks.length ? listTasks : [listTasks]);\r\n    }, [listTasks]);\r\n\r\n    return (\r\n        <>\r\n            {\r\n                allListTasks.map(itemTask => (\r\n                    <div key={itemTask.id}>\r\n                        <TaskListTitle changeTaskTitle={changeTaskTitle} itemTask={itemTask} />\r\n\r\n                        <ul className=\"tasks__list\">\r\n                            {\r\n                                itemTask.tasks.map(task => (\r\n                                    <li className=\"tasks__list-item\" key={task.id}>\r\n                                        {\r\n                                            activeTaskChange && activeTaskChange === task.id\r\n                                                ?\r\n                                                <ChangeTaskForm task={task}\r\n                                                                onChangeTaskText={onChangeTaskText}\r\n                                                                setCloseInput={setActiveTaskChange}\r\n                                                />\r\n                                                :\r\n                                                <ContentTask task={task}\r\n                                                             changeTaskCheck={changeTaskCheck}\r\n                                                             deleteTaskItem={deleteTaskItem}\r\n                                                             taskIdToChange={setActiveTaskChange}\r\n                                                />\r\n\r\n                                        }\r\n                                    </li>\r\n\r\n                                ))\r\n                            }\r\n                        </ul>\r\n                        {\r\n                            visibleInput && itemTask.id === idInputFolder ?\r\n                                <AddTask taskId={itemTask.id} onHiddenInput={setVisibleInput}\r\n                                         addNewTask={addNewTask}/> :\r\n                                <List\r\n                                    lists={[{name: 'Добавить папку', icon: iconAdd}]}\r\n                                    isTasksList={true}\r\n                                    onAddTask={(e) => {\r\n                                        setVisibleInput(true);\r\n                                        setIdInputFolder(itemTask.id);\r\n                                    }}\r\n                                />\r\n                        }\r\n                    </div>\r\n                ))\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default TasksList;","import React, {useState, useEffect} from \"react\";\r\nimport TasksList from \"./TasksList/TasksList\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Tasks = React.memo(({activeItemList, changeTaskTitle, addNewTask, changeTaskCheck, listTasks, onChangeTaskText, deleteTaskItem}) => {\r\n    const [activeItem, setActiveItem] = useState(0);\r\n    let history = useHistory().location.pathname;\r\n\r\n    useEffect(() => {\r\n        let activeLink = history.split('/lists/');\r\n        setActiveItem(Number(activeLink[1]) - 1);\r\n    }, [history]);\r\n\r\n    return (\r\n        <>\r\n            {\r\n                <TasksList listTasks={!isNaN(activeItem) ? listTasks[activeItem] : listTasks}\r\n                           changeTaskTitle={changeTaskTitle}\r\n                           changeTaskCheck={changeTaskCheck}\r\n                           onChangeTaskText={onChangeTaskText}\r\n                           deleteTaskItem={deleteTaskItem}\r\n                           addNewTask={addNewTask}\r\n                />\r\n            }\r\n        </>\r\n    )\r\n});\r\n\r\nexport default Tasks;","import React, {useEffect} from 'react';\nimport {connect} from \"react-redux\";\nimport {Route} from \"react-router-dom\";\nimport Tasks from \"./Tasks\";\nimport {\n    addNewTask,\n    changeTaskCheck,\n    changeTaskTitle,\n    getTasks,\n    onChangeTaskText,\n    deleteTaskItem\n} from \"../../store/Tasks/actions\";\n\n\nconst TasksContainer = ({getTasks, activeItemList, changeTaskTitle, addNewTask, changeTaskCheck, listTasks, onChangeTaskText, deleteTaskItem}) => {\n    useEffect(() => {\n        getTasks()\n    }, [getTasks]);\n\n\n    return (\n        <>\n            <Route path=\"/ToDo/lists/:id\">\n                {\n                    listTasks && listTasks.length > 0 &&\n                    <Tasks\n                        listTasks={listTasks}\n                        activeItemList={activeItemList}\n                        changeTaskTitle={changeTaskTitle}\n                        addNewTask={addNewTask}\n                        changeTaskCheck={changeTaskCheck}\n                        onChangeTaskText={onChangeTaskText}\n                        deleteTaskItem={deleteTaskItem}\n                    />\n                }\n            </Route>\n        </>\n    );\n};\n\nconst mapStateToProps = ({lists}) => {\n    return {\n        activeItemList: lists.activeItemLists,\n        listTasks: lists.lists\n    }\n};\n\nexport default connect(mapStateToProps, {\n    getTasks,\n    changeTaskTitle,\n    addNewTask,\n    changeTaskCheck,\n    onChangeTaskText,\n    deleteTaskItem\n})(TasksContainer);","import React from 'react';\nimport ListContainer from \"./components/List/ListContainer\";\nimport {applyMiddleware, createStore} from \"redux\";\nimport {Provider} from \"react-redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport rootReducer from \"./store/index\"\nimport AddListContainer from \"./components/AddList/AddListContainer\";\nimport TasksContainer from \"./components/Tasks/TasksContainer\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nwindow.store = store;\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <div className=\"wrap\">\n                <div className=\"todo\">\n                    <div className=\"todo__sidebar\">\n                        <ListContainer/>\n                        <AddListContainer />\n                    </div>\n                    <div className=\"todo__tasks\">\n                        <TasksContainer />\n                    </div>\n                </div>\n            </div>\n        </Provider>\n    );\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport './index.scss';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n"],"sourceRoot":""}